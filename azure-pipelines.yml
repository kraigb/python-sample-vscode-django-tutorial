# Python Django
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

variables:
  azureSubscriptionEndpoint: 'Primary (44f7aaf4-97f8-4aa9-a791-245ed34e3bd5)'
  WebAppName: 'djangopipelines'

pool:
  name: Hosted Ubuntu 1604

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.6'
    architecture: 'x64'

#- task: PythonScript@0
#  displayName: 'Export project path'
#  inputs:
#    scriptSource: 'inline'
#    script: |
#      """Search all subdirectories for `manage.py`."""
#      from glob import iglob
#      from os import path
#      # Python >= 3.5
#      manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
#      if not manage_py:
#          raise SystemExit('Could not find a Django project')
#      project_location = path.dirname(path.abspath(manage_py))
#      print('Found Django project in', project_location)
#      print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))

# This script is only for the build agent. If you're running tests, then you
# want to install dependencies.
#- script: |
#    python -m pip install --upgrade pip setuptools wheel
#    pip install -r requirements.txt
#    pip install unittest-xml-reporting
#  displayName: 'Install prerequisites'

#- script: |
#    pushd '$(projectRoot)'
#    python manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
#  displayName: 'Run tests'

#- task: PublishTestResults@2
#  inputs:
#    testResultsFiles: "**/TEST-*.xml"
#    testRunTitle: 'Python $(PYTHON_VERSION)'
#  condition: succeededOrFailed()

- script: |
    python3.6 -m venv antenv3.6
    source antenv3.6/bin/activate
    pip3.6 install setuptools
    pip3.6 install -r requirements.txt

  displayName: 'Install Dependencies'
  workingDirectory: Application

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)/Application'
    includeRootFolder: false 
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/Application$(Build.BuildId).zip'
    replaceExistingArchive: true 
    verbose: # Optional

- task: AzureRMWebAppDeployment@4
  displayName: Azure App Service Deploy
  inputs:
    appType: webAppLinux
    RuntimeStack: 'PYTHON|3.6'
    ConnectedServiceName: $(azureSubscriptionEndpoint)
    WebAppName: $(WebAppName)
    Package: '$(Build.ArtifactStagingDirectory)/Application$(Build.BuildId).zip'
